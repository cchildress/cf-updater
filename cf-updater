#!/usr/bin/env python3
"""
Daemon to monitor the apparent public IP address of a machine and
update a given CloudFlare DNS record to match.
"""
import argparse
import configparser
import json
import requests
import signal
import sys

__author__ = "Cameron Childress"
__email__ = "python@cchildress.org"
__version__ = "too soon to say"

# TODOs:
# 1. Output buffer to handle logging to console / file
# 2. Daemon stuff (sleep for now?)
# 3. Figure out getting a local interface's address directly without crazy dependencies


def arg_handler():
    global config_runtime
    parser = argparse.ArgumentParser(description="%(prog)s - "
                                     "Update CloudFlare with current IP")
    parser.add_argument("-c", "--config", help="Config file path.",
                        default="./config.ini", dest="config_file")
    parser.add_argument("-d", "--debug", action="store_true", help="Debug Mode")
    parser.add_argument("-v", "--version", action="version",
                        version="%(prog)s version {0}".format(__version__))
    config_runtime = parser.parse_args()


def cf_api_handler(api_path):
    headers = {
        'X-Auth-Email': config_file['cloudflare']['username'],
        'X-Auth-Key': config_file['cloudflare']['auth_token'],
        'Content-Type': 'application/json'
    }
    r = requests.get("https://api.cloudflare.com/client/v4/{0}".format(api_path),
                     headers=headers)
    if r.status_code != 200:
        print("CloudFlare API failure - HTTP status code:{0}"
              .format(r.status_code))
        if config_runtime.debug:
            print("CloudFlare URI: {0}\nFailure text: '{1}'"
                  .format("https://api.cloudflare.com/client/v4/{0}"
                  .format(api_path), r.text))
        sys.exit(1)
    return r.json()


def get_cf_zone_id():
    return cf_api_handler('zones')['result'][0]['id']


def get_current_cf_record_info(zone_id):
    cf = cf_api_handler("zones/{0}/dns_records".format(zone_id))
    for record in cf['result']:
        if record['name'] == config_file['cloudflare']['hostname']:
            if record['type'] == 'A':
                return record['id'], record['content']
    return None


def get_current_ip():
    if config_file['default']['polling_method'] == 'external':
        return get_current_ip_external()
    elif config_file['default']['polling_method'] == 'interface':
        return get_current_ip_interface()
    else:
        print("polling_method in {0} is invalid - please set it to either 'external' or 'interface'"
              .format(config_runtime.config_file))
        sys.exit(1)

def get_current_ip_external():
    r = requests.get(config_file['default']['polling_address'])
    if r.status_code != 200:
        print("Could not fetch current IP address - HTTP status code:{0}".
              format(r.status_code))
        sys.exit(1)
    return r.text.rstrip()


# TODO: this is very broken
def get_current_ip_interface():
    import socket
    import fcntl
    import struct
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    return socket.inet_ntoa(fcntl.ioctl(
        s.fileno(),
        0x8915,  # SIOCGIFADDR
        struct.pack('256s', bytes(config_file['default']['polling_interface'][:15], 'utf-8'))
    )[20:24])


def read_config_file():
    global config_file
    config_file = configparser.ConfigParser()
    config_file.read(config_runtime.config_file)


def update_cloudflare(zone_id, record_id, dest_ip, ttl=600, cdn_enabled=False):
    cf_base = "https://api.cloudflare.com/client/v4/zones/"
    cf_uri = cf_base + zone_id + "/dns_records/" + record_id
    headers = {
        'X-Auth-Email': config_file['cloudflare']['username'],
        'X-Auth-Key': config_file['cloudflare']['auth_token'],
        'Content-Type': 'application/json'
    }
    payload = {
        "type": "A",
        "name": config_file['cloudflare']['hostname'],
        "content": dest_ip,
        "ttl": ttl,
        "proxied": cdn_enabled
    }
    r = requests.put(cf_uri, headers=headers, data=json.dumps(payload))
    if r.status_code != 200:
        print("CloudFlare update failre - HTTP status code:{0}"
              .format(r.status_code))
        if config_runtime.debug:
            print("CloudFlare URI: {0}\nFailure text: '{1}'"
                  .format(cf_uri, r.text))
        sys.exit(1)
    _, new_record_value = get_current_cf_record_info(zone_id)
    if new_record_value == dest_ip:
        print("CloudFlare DNS for {0} updated successfully to {1}"
              .format(config_file['cloudflare']['hostname'], dest_ip))


def main():
    arg_handler()
    read_config_file()
    if config_runtime.debug:
        print("Debug mode enabled.")
        current_ip = get_current_ip()
        cf_zone_id = get_cf_zone_id()
        cf_record_id, cf_record_value = get_current_cf_record_info(cf_zone_id)
        print("Detected current ip as {0}".format(current_ip))
        print("Detected CloudFlare zone ID as {0}".format(cf_zone_id))
        print("Detected CloudFlare record ID for hosname {0} as {1}"
              .format(config_file['cloudflare']['hostname'], cf_record_id))
        print("{0} currently points at {1}"
              .format(config_file['cloudflare']['hostname'], cf_record_value))
        if current_ip != cf_record_value:
            print("CloudFlare DNS does not match current IP - updating.")
            update_cloudflare(cf_zone_id, cf_record_id, current_ip)
        else:
            print("CloudFlare DNS is up to date - nothing to do here.")
        exit(0)
    else:
        print("Starting {}".format(sys.argv[0]))
        signal.signal(signal.SIGHUP, read_config_file)
        signal.pause()

        # while(True):
        #     try:
        #         run_once(cf_zone_id)
        #         sys.sleep(config.polling_interval)
        #     except KeyboardInterrupt:
        #         print("Exiting")
        #         exit(0)

if __name__ == "__main__":
    main()
